# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -1000, to = 1000, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# # Labels
# geom_text(aes(x = 0.5, y = -0.26, label = "G(p) = t/20 - log(2)"), color = "darkorange3") +
# geom_text(aes(x = 0.3, y = -0.55, label = "G(p)"), color = "darkturquoise") +
#
# geom_text(aes(x = 0.14, y = -0.7, label = "P = a"), color = "darkorange3") +
# geom_text(aes(x = 0.98, y = -0.7, label = "P = 1-a"), color = "darkorange3") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")+
theme(axis.text=element_blank(),
axis.ticks=element_blank())
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# # Labels
# geom_text(aes(x = 0.5, y = -0.26, label = "G(p) = t/20 - log(2)"), color = "darkorange3") +
# geom_text(aes(x = 0.3, y = -0.55, label = "G(p)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 50, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# # Labels
# geom_text(aes(x = 0.5, y = -0.26, label = "G(p) = t/20 - log(2)"), color = "darkorange3") +
# geom_text(aes(x = 0.3, y = -0.55, label = "G(p)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -100, to = 100, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# # Labels
# geom_text(aes(x = 0.5, y = -0.26, label = "G(p) = t/20 - log(2)"), color = "darkorange3") +
# geom_text(aes(x = 0.3, y = -0.55, label = "G(p)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 200, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# # Labels
# geom_text(aes(x = 0.5, y = -0.26, label = "G(p) = t/20 - log(2)"), color = "darkorange3") +
# geom_text(aes(x = 0.3, y = -0.55, label = "G(p)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 200, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# Labels
geom_text(aes(x = -25, y = 0.9, label = "Beta(t)"), color = "darkorange3") +
geom_text(aes(x = -25, y = 0.1, label = "alpha(t)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 200, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# Labels
geom_text(aes(x = -25, y = 0.95, label = "Beta(t)"), color = "darkorange3") +
geom_text(aes(x = -25, y = 0.05, label = "alpha(t)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 200, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# Labels
geom_text(aes(x = -50, y = 0.95, label = "Beta(t)"), color = "darkorange3") +
geom_text(aes(x = -50, y = 0.05, label = "Alpha(t)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 200, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# Labels
geom_text(aes(x = -40, y = 0.95, label = "Beta(t)"), color = "darkorange3") +
geom_text(aes(x = -40, y = 0.05, label = "Alpha(t)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 200, by = 1)) %>%
# This function returns a p-value given a statistic and a specific chi-square distribution:
# https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = TRUE, log.p = FALSE))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# Labels
geom_text(aes(x = -35, y = 0.95, label = "Beta(t)"), color = "darkorange3") +
geom_text(aes(x = -35, y = 0.05, label = "Alpha(t)"), color = "darkturquoise") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
# 1. Generate a random variable X, under silence:
vars <- data.frame(Xi = rnorm(100, mean = 0,  sd = 1))
# 2. Compute ai:
vars$ai <- 0.1*sin((2*pi*1:100)/100)
# 3. Compute the L statistic (under silence and signall):
vars$Li_silence <- vars$ai^2 - 2*vars$ai*vars$Xi
vars$Li_signal <- 2*vars$ai*vars$Xi - vars$ai^2
L_silence = sum(vars$Li_silence)/2
L_signal = sum(vars$Li_signal)/2
# 4. Compute alpha under different values of t:
ROC = data.frame(t = seq(from = -50, to = 200, by = 1)) %>%
# This returns a p-value given a statistic and a  chi-square distribution:
# www.rdocumentation.org/packages/stats/versions/3.6.2/topics/Chisquare
mutate(alpha = pchisq(t, df = 99, ncp = 0, lower.tail = T, log.p = F)) %>%
# 5. Compute Beta under different values of t:
mutate(beta = 1-pchisq(t, df = 99, ncp = 0, lower.tail = T, log.p = F))
# Plot the function:
ggplot(data = ROC) +
geom_line(aes(x = t, y = alpha), na.rm = TRUE, color = "darkturquoise") +
geom_line(aes(x = t, y = beta), na.rm = TRUE, color = "darkorange3") +
# Labels
geom_text(aes(x = -35, y = 0.05, label = "Alpha(t)"), color = "darkturquoise") +
geom_text(aes(x = -35, y = 0.95, label = "Beta(t)"), color = "darkorange3") +
ggtitle("ROC \n") + xlab("\n t") + ylab("Alpha and Beta \n")
View(ROC)
# Computing the PPV
pi_1 = 1/10000
pi_0 = 1-pi_1
alpha = 0.05
beta = 0.99999
PPV = (pi_1*beta)/((10*pi_0*alpha) + (pi_1*beta))
PPV
0.001996/0.000199978
0.001996/9.981098
# Computing the PPV
pi_1 = 1/10000
pi_0 = 1-pi_1
alpha = 0.05
beta = 0.99999
PPV = (pi_1*beta^(10))/((pi_0*alpha) + (pi_1*beta^(10)))
PPV
PPV = (pi_1*beta^(10))/((pi_0*alpha^(10)) + (pi_1*beta^(10)))
PPV
# Computing the PPV
pi_1 = 1/10000
pi_0 = 1-pi_1
alpha = 0.05
beta = 0.99999
PPV = (pi_1*beta^(10))/((pi_0*alpha^(10)) + (pi_1*beta^(10)))
PPV
PPV = (pi_1*beta^(10))/((pi_0*alpha)^(10) + (pi_1*beta^(10)))
PPV
# Computing the PPV
pi_1 = 1/10000
pi_0 = 1-pi_1
alpha = 0.05^(10)
beta = 0.99999^(10)
beta
alpha
PPV = (pi_1*beta)/((pi_0*alpha) + (pi_1*beta))
PPV
0.99999*0.99999*0.99999*0.99999*0.99999
# Computing the PPV
pi_1 = 1/10000
pi_0 = 1-pi_1
alpha = 0.05
beta = 0.99999^(10)
PPV = (pi_1*beta)/((pi_0*(1 - (1-alpha)^(10))) + (pi_1*beta))
PPV
0.000249151/0.001996
5-(sqrt(10)/2)*−1.8974
5+(sqrt(10)/2)*−1.8974
8/10
20((3/5)*log((3/5)) + (2/5)*log((2/5)) + log(2) )
20*((3/5)*log((3/5)) + (2/5)*log((2/5)) + log(2) )
3*2/(sqrt(10))
# R CODE FOR THIS PROBLEM
dat = read.csv("arbuthnot.csv")
# Create an n-size column n_i
dat$n_i = dat$girls + dat$boys
# Create an p(boy) column p_i
dat$p_i = dat$boys/dat$n_i
# Compute the observed value
obs = 1/sum(dat$n_i)*sum((dat$boys - dat$n_i*dat$p_i)^2)
obs
# Compute the observed value
obs = (1/sum(dat$n_i))*sum((dat$boys - dat$n_i*dat$p_i)^2)
obs
sum(dat$n_i)
View(dat)
# diff
dat$diff = dat$boys - dat$n_i*dat$p_i
dat$diff_squared = dat$diff*dat$diff
# diff
dat$diff = dat$boys - dat$n_i*dat$p_i
dat$diff_squared = dat$diff*dat$diff
sum(dat$diff_squared)
sum(dat$diff_squared)/sum(dat$n_i))
sum(dat$diff_squared)/sum(dat$n_i)
sum(dat$boys)
rm(list = ls())
# provide path to the working directory
path <- 'C:/Users/axell/OneDrive/Documents/MIT/IDS 131/PS1data_and_materials/data_and_materials'
# Load all necessary packages
packages <- c( 'plyr',
'dplyr',
'tidyr',
'reshape2',
'ggplot2',
'gridExtra',
"kableExtra",
"data.table",
"knitr",
"DescTools")
lapply(packages, library, character.only = TRUE)
df2 <- data.frame(a = seq(1,16,by=2), b = LETTERS[1:8], x= month.abb[1:8], y = sample(10:20,8, replace = TRUE), z=letters[1:8])
View(df2)
df <- data.frame(a = seq(1,16,by=2), b = LETTERS[1:8], x= month.abb[1:8], y = sample(10:20,8, replace = TRUE), z=letters[1:8])
set.seed(1)
df$varY = rnorm(15)
df$varZ = ceiling(rnorm(15))
df$varX = ifelse(sign(rnorm(15))==-1,0,1)
rm(list = ls())
# provide path to the working directory
path <- 'C:/Users/axell/OneDrive/Documents/MIT/IDS 131/PS1data_and_materials/data_and_materials'
# Load all necessary packages
packages <- c( 'plyr',
'dplyr',
'tidyr',
'reshape2',
'ggplot2',
'gridExtra',
"kableExtra",
"data.table",
"knitr",
"DescTools")
lapply(packages, library, character.only = TRUE)
df <- data.frame(a = seq(1,12, by=1), b = LETTERS[1:12], x= month.abb[1:12], y = sample(10:20, 12, replace = TRUE), z=letters[1:12])
set.seed(1)
df$varY = rnorm(12)
df$varZ = ceiling(rnorm(12))
df$varX = ifelse(sign(rnorm(12))==-1,0,1)
View(df)
sample(LETTERS[1:5],16,replace = TRUE)
write.csv("MockDataset.csv")
write.csv(df, "MockDataset.csv", row.names = FALSE)
getwd()
# PROGRAM NAME: 6.859 - Final Project
# DESCRIPTION: Identify "failles"
# PROGRAMMER(S): Axelle Clochard
# DATE WRITTEN: 5/05/2021
# STEP 0. SET UP WORKSPACE AND LOAD DATA
# ---------------------------------------------------------------------------------------------------#
# ---------------------------------------------------------------------------------------------------#
# A. SET WORKSPACE PARAMS
# ------------------------#
rm(list = ls())
# Set working directory to where file is
# script.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
# setwd(script.dir)
setwd('C:/Users/axell/OneDrive/Documents/MIT/6.859/A4/final-project-call-of-data/data/output')
# install packages if necessary
packages <- c("ggplot2",
"plyr",
"scales",
"dplyr",
'stringr',
"tidyr",
"purrr",
"gridExtra",
"grid",
"xlsx",
"reshape2",
"stargazer",
"Hmisc",
"readxl",
"httr",
"Hmisc",
"ipumsr",
"R.utils",
"maps",
"rgdal",
"ggtext",
"data.table",
"icd.data")
install_list <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(install_list)) install.packages(install_list)
lapply(packages, require, character.only = TRUE)
#### B1. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X))
# Simplify column names:
names(country) <- c("Location", "Year",
"CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP",
"Population", "GDP", "Group1", "Group2", "Group3", "Group4", "Group5",
"Growth_CO2", "Growth_Primary_Energy", "Growth_Pop",
"Growth_CO2_per_GDP", "Growth_CO2_per_Capita", "Growth_Energy_per_GDP", "Growth_Energy_per_Capita")
# Convert Year to a Data
country$Year_num <- country$Year
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
# Country Grouping Variables
country_2016 <- subset(country, Year_num == 2016) %>%
mutate(GDP_Quartile = ntile(GDP, 4)) %>%
mutate(Pop_Quartile = ntile(Population, 4))
country <- merge(x = country,
y = subset(country, Year_num == 2016) %>%
mutate(GDP_Quartile = ntile(GDP, 4),
Pop_Quartile = ntile(Population, 4))%>%
subset(., select = c(Location, GDP_Quartile, Pop_Quartile)),
by = "Location")
# Re-Organize
country <- country[c("Year", "Year_num", "Location", "Population", "Pop_Quartile","GDP", "GDP_Quartile", "Group1", "Group2", "Group3", "Group4", "Group5",
"CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP",
"Growth_CO2", "Growth_Primary_Energy", "Growth_Pop", "Growth_CO2_per_GDP", "Growth_CO2_per_Capita", "Growth_Energy_per_GDP", "Growth_Energy_per_Capita")]
# Re-shape to match example:
country <- gather(country, Metric, Value, CO2:Growth_Energy_per_Capita, factor_key=TRUE)
#### B2. Read in COUNTRY-LEVEL DATA: 90s
country90s = read.csv("./country-level-90s.csv", stringsAsFactors = F)
# Drop Row Index column
country90s <- subset(country90s, select = -c(X))
# Simplify column names:
names(country90s) <- c("Location", "Year",
"CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP",
"Population", "GDP", "Group1", "Group2", "Group3", "Group4", "Group5",
"Growth_CO2", "Growth_Primary_Energy", "Growth_Pop", "Growth_CO2_per_GDP", "Growth_CO2_per_Capita", "Growth_Energy_per_GDP", "Growth_Energy_per_Capita")
# Convert Year to a Data
country90s$Year_num <- country90s$Year
country90s$Year <- as.Date(ISOdate(country90s$Year, 1, 1))
# Country Grouping Variables
country_2016 <- subset(country90s, Year_num == 2016) %>%
mutate(GDP_Quartile = ntile(GDP, 4)) %>%
mutate(Pop_Quartile = ntile(Population, 4))
country90s <- merge(x = country90s,
y = subset(country90s, Year_num == 2016) %>%
mutate(GDP_Quartile = ntile(GDP, 4),
Pop_Quartile = ntile(Population, 4))%>%
subset(., select = c(Location, GDP_Quartile, Pop_Quartile)),
by = "Location")
# Re-Organize
country90s <- country90s[c("Year", "Year_num", "Location", "Population", "Pop_Quartile","GDP", "GDP_Quartile", "Group1", "Group2", "Group3", "Group4", "Group5",
"CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP",
"Growth_CO2", "Growth_Primary_Energy", "Growth_Pop", "Growth_CO2_per_GDP", "Growth_CO2_per_Capita", "Growth_Energy_per_GDP", "Growth_Energy_per_Capita")]
# Re-shape to match example:
country90s <- gather(country90s, Metric, Value, CO2:Growth_Energy_per_Capita, factor_key=TRUE)
# Add a 90s label to the metrics:
country90s$Metric <- paste0(country90s$Metric, "_90s")
#### B3. MERGE THE TWO DATA SETS
data <- rbind(x = country90s,
y = country)
#### B4. CREATE DATA MANIPULATION VARIABLES AND RE-SHAPE DATA:
# GROUP: Question 3
data$Group1 <- as.character(data$Group1)
data$Group2 <- gsub(1, 2, as.character(data$Group2))
data$Group3 <- gsub(1, 3, as.character(data$Group3))
data$Group4 <- gsub(1, 4, as.character(data$Group4))
data$Group5 <- gsub(1, 5, as.character(data$Group5))
data$Group = paste(data[,8], data[,9], data[,10], data[,11], data[,12])
# PARAMETER: Question 1
CO2_vars = c("CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Growth_CO2", "Growth_CO2_per_GDP", "Growth_CO2_per_Capita",
"CO2_90s", "CO2_per_GDP_90s", "Share_of_Global_CO2_90s", "CO2_per_Capita_90s", "CO2_per_Unit_Energy_90s", "Growth_CO2_90s", "Growth_CO2_per_GDP_90s", "Growth_CO2_per_Capita_90s")
energy_vars = c("Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP", "Growth_Primary_Energy", "Growth_Energy_per_GDP", "Growth_Energy_per_Capita",
"Primary_Energy_Consumption_90s", "Energy_per_Capita_90s", "Energy_per_GDP_90s","Growth_Primary_Energy_90s", "Growth_Energy_per_GDP_90s", "Growth_Energy_per_Capita_90s")
data$Parameter <- ifelse(data$Metric %in% CO2_vars, "CO2",
ifelse(data$Metric %in% energy_vars, "Primary_Energy_Consumption", NA))
# TIME FRAME: Question 2
data$Time <- ifelse(grepl("_90s", data$Metric, fixed = TRUE), 1990, 1965)
# ABSOLUTE vs RELATIVE: Question 4 (Manip 1)
data$Manip1 <- ifelse(grepl("Growth", data$Metric, fixed = TRUE), "Growth", "Absolute")
# DENOMINATOR: Question 5 (Manip 2)
data$Manip2 <- ifelse(grepl("per_Capita", data$Metric, fixed = TRUE), "Population",
ifelse(grepl("per_GDP", data$Metric, fixed = TRUE), "GDP", "NoneD"))
#### B6. CLEAN UP AND WRITE TO CSV
data <- subset(data, select = -c(Group1, Group2, Group3, Group4, Group5, Population, Pop_Quartile, GDP , GDP_Quartile))
data <- data[c("Year", "Year_num", "Location",  "Parameter", "Time", "Group", "Manip1", "Manip2", "Metric", "Value")]
# Remove extra variables that could corrupt graph
data <- subset(data, ! Metric %in% c("Growth_Pop", "Growth_Pop_90s"))
data <- subset(data, ! Metric %in% c("Share_of_Global_CO2_90s", "CO2_per_Unit_Energy_90s", "Share_of_Global_CO2", "CO2_per_Unit_Energy"))
unique(data$Location)
data$Location <- gsub("South", "S.", data$Location)
data$Location <- gsub("United Kingdom", "U.K.", data$Location)
data$Location <- gsub("United States", "U.S.A.", data$Location)
unique(data$Location)
# Write CSV
write.csv(data, "reshaped_country_data.csv", row.names = F)
