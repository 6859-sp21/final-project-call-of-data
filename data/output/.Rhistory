View(df)
sample(LETTERS[1:5],16,replace = TRUE)
write.csv("MockDataset.csv")
write.csv(df, "MockDataset.csv", row.names = FALSE)
getwd()
# PROGRAM NAME: 6.859 - Final Project
# DESCRIPTION: Identify "failles"
# PROGRAMMER(S): Axelle Clochard
# DATE WRITTEN: 5/05/2021
# STEP 0. SET UP WORKSPACE AND LOAD DATA
# ---------------------------------------------------------------------------------------------------#
# ---------------------------------------------------------------------------------------------------#
# A. SET WORKSPACE PARAMS
# ------------------------#
rm(list = ls())
# Set working directory to where file is
# script.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
# setwd(script.dir)
setwd('C:/Users/axell/OneDrive/Documents/MIT/6.859/A4/final-project-call-of-data/data')
# install packages if necessary
packages <- c("ggplot2",
"plyr",
"scales",
"dplyr",
'stringr',
"tidyr",
"purrr",
"gridExtra",
"grid",
"xlsx",
"reshape2",
"stargazer",
"Hmisc",
"readxl",
"httr",
"Hmisc",
"ipumsr",
"R.utils",
"maps",
"rgdal",
"ggtext",
"data.table",
"icd.data")
install_list <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(install_list)) install.packages(install_list)
lapply(packages, require, character.only = TRUE)
#### B1. Read in aggregated MORTALITY data:
absolute = read.csv("/absolute-increase-global-population.csv", stringsAsFactors = F)
#### B1. Read in aggregated MORTALITY data:
absolute = read.csv("./absolute-increase-global-population.csv", stringsAsFactors = F)
View(absolute)
data = read.csv("./global-energy-substitution.csv", stringsAsFactors = F)
View(data)
names(data)
names(data) <- gsub("..TWh..substituted.energy.", "", names(data))
#Simplify column names
names(data) <- gsub("..TWh..substituted.energy.", "", names(data))
# Re-shape to match example:
data2 <- gather(data, type, TWh, Wind:Gas, factor_key=TRUE)
View(data2)
rnorm(1, mean = 1, sd = 1)
# Create a mock second group:
data2 <- rbind(x = data2,
y = data2 %>%
mutate(Code = notWorld)
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh))
# Create a mock second group:
data2 <- rbind(x = data2,
y = data2 %>%
mutate(Code = notWorld) %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh))
# Create a mock second group:
data2 <- rbind(x = data2,
y = data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh))
# Re-shape to match example:
data2 <- gather(data, type, TWh, Wind:Gas, factor_key=TRUE)
# Create a mock second group:
data2 <- rbind(x = data2,
y = data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh))
y = data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh)
# Re-shape to match example:
data2 <- gather(data, type, TWh, Wind:Gas, factor_key=TRUE)
y = data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh)
# Create a mock second group:
data2 <- rbind(x = data2,
(y = data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh)))
# Create a mock second group:
data2 <- rbind(x = data2,
y = (data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh)))
# Re-shape to match example:
data2 <- gather(data, type, TWh, Wind:Gas, factor_key=TRUE)
# Create a mock second group:
data2 <- rbind(x = data2,
y = (data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh)))
View(data2)
# Re-shape to match example:
data2 <- gather(data, type, TWh, Wind:Gas, factor_key=TRUE)
# Create a mock second group:
data2_mock <- data2 %>%
mutate(Code = "notWorld") %>%
group_by(type) %>%
mutate(TWh = rnorm(1, mean = 1, sd = 1)*TWh)
data_final <- rbind(data2, data2_mock)
View(data_final)
View(data2)
View(data2_mock)
data_final <- rbind(data2, as.data.frame(data2_mock))
View(data)
View(data_final)
write.csv(data_final, "ReshapedSubstitutionData.csv")
write.csv(data_final, "ReshapedSubstitutionData.csv", row.names = F)
unique(data_final$type)
data_final$Year <- as.Date(ISOdate(data_final$Year, 1, 1))
View(data_final)
write.csv(data_final, "ReshapedSubstitutionData.csv", row.names = F)
View(data_final)
# PROGRAM NAME: 6.859 - Final Project
# DESCRIPTION: Identify "failles"
# PROGRAMMER(S): Axelle Clochard
# DATE WRITTEN: 5/05/2021
# STEP 0. SET UP WORKSPACE AND LOAD DATA
# ---------------------------------------------------------------------------------------------------#
# ---------------------------------------------------------------------------------------------------#
# A. SET WORKSPACE PARAMS
# ------------------------#
rm(list = ls())
# Set working directory to where file is
# script.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
# setwd(script.dir)
setwd('C:/Users/axell/OneDrive/Documents/MIT/6.859/A4/final-project-call-of-data/data/output')
# install packages if necessary
packages <- c("ggplot2",
"plyr",
"scales",
"dplyr",
'stringr',
"tidyr",
"purrr",
"gridExtra",
"grid",
"xlsx",
"reshape2",
"stargazer",
"Hmisc",
"readxl",
"httr",
"Hmisc",
"ipumsr",
"R.utils",
"maps",
"rgdal",
"ggtext",
"data.table",
"icd.data")
install_list <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(install_list)) install.packages(install_list)
lapply(packages, require, character.only = TRUE)
# B. READ IN DATA
# ------------------------#
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
View(global)
names(global)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "TWh", names(data))
names(global)
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "TWh", names(global))
# Simplify column names:
names(global)
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "_TWh", names(global))
names(global)
names(global) <- c("X", "Year", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels" )
# Convert Year to a Data
global$Year <- as.Date(ISOdate(global$Year, 1, 1))
global$Year
# Add a Location Identifier
global$Location <- "World"
# Drop Row Index column
global <- subset(global, select = -c(X))
names(global)
# Re-Organize
global <- global[c("Year", "Location", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels")]
names(global)
# Re-shape to match example:
global <- gather(global, Variable, Metric, Population:All_Fuels, factor_key=TRUE)
View(global)
#### B2. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
View(country)
names(country)
View(country)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
names(country)
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "_TWh", names(global))
names(global) <- c("X", "Year", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels" )
# Convert Year to a Data
global$Year <- as.Date(ISOdate(global$Year, 1, 1))
# Add a Location Identifier
global$Location <- "World"
# Drop Row Index column
global <- subset(global, select = -c(X))
# Re-Organize
global <- global[c("Year", "Location", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels")]
# Re-shape to match example:
global <- gather(global, Variable, Metric, CO2_Avg:All_Fuels, factor_key=TRUE)
#### B2. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
names(country)
names(country)
# Simplify column names:
names(country) <- c("Location", "Year", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_capita", "CO2_per_unit_energy", "Primary_Energy_Consumption", "Energy_per_capita", "Energy_per_GDP", "Population", "GDP" )
# Convert Year to a Data
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
names(country)
global$GDP <- NA
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "_TWh", names(global))
names(global) <- c("X", "Year", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels" )
# Convert Year to a Data
global$Year <- as.Date(ISOdate(global$Year, 1, 1))
# Add a Location and GDP Identifier
global$Location <- "World"
global$GDP <- NA
# Drop Row Index column
global <- subset(global, select = -c(X))
# Re-Organize
global <- global[c("Year", "Location", "Population", "GDP","CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels")]
# Re-shape to match example:
global <- gather(global, Variable, Metric, CO2_Avg:All_Fuels, factor_key=TRUE)
# Re-shape to match example:
country <- gather(country, Variable, Metric, CO2:Energy_per_GDP, factor_key=TRUE)
#### B2. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
# Simplify column names:
names(country) <- c("Location", "Year", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP", "Population")
# Convert Year to a Data
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
# Re-Organize
country <- country[c("Year", "Location", "Population", "GDP", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP")]
# Re-shape to match example:
country <- gather(country, Metric, Value, CO2:Energy_per_GDP, factor_key=TRUE)
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "_TWh", names(global))
names(global) <- c("X", "Year", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels" )
# Convert Year to a Data
global$Year <- as.Date(ISOdate(global$Year, 1, 1))
# Add a Location and GDP Identifier
global$Location <- "World"
global$GDP <- NA
# Drop Row Index column
global <- subset(global, select = -c(X))
# Re-Organize
global <- global[c("Year", "Location", "Population", "GDP","CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels")]
# Re-shape to match example:
global <- gather(global, Metric, Value, CO2_Avg:All_Fuels, factor_key=TRUE)
#### B2. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
# Simplify column names:
names(country) <- c("Location", "Year", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP", "Population")
# Convert Year to a Data
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
# Re-Organize
country <- country[c("Year", "Location", "Population", "GDP", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP")]
# Re-shape to match example:
country <- gather(country, Metric, Value, CO2:Energy_per_GDP, factor_key=TRUE)
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
# Simplify column names:
names(country)
# Simplify column names:
names(country) <- c("Location", "Year", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP", "Population", "GDP")
# Convert Year to a Data
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
# Re-Organize
country <- country[c("Year", "Location", "Population", "GDP", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP")]
# Re-shape to match example:
country <- gather(country, Metric, Value, CO2:Energy_per_GDP, factor_key=TRUE)
#### B3. COMBINE AND WRITE TO CSV
data <- rbind(global, country)
write.csv(data, "reshaped_all_data.csv", row.names = F)
# PROGRAM NAME: 6.859 - Final Project
# DESCRIPTION: Identify "failles"
# PROGRAMMER(S): Axelle Clochard
# DATE WRITTEN: 5/05/2021
# STEP 0. SET UP WORKSPACE AND LOAD DATA
# ---------------------------------------------------------------------------------------------------#
# ---------------------------------------------------------------------------------------------------#
# A. SET WORKSPACE PARAMS
# ------------------------#
rm(list = ls())
# Set working directory to where file is
# script.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
# setwd(script.dir)
setwd('C:/Users/axell/OneDrive/Documents/MIT/6.859/A4/final-project-call-of-data/data/output')
# install packages if necessary
packages <- c("ggplot2",
"plyr",
"scales",
"dplyr",
'stringr',
"tidyr",
"purrr",
"gridExtra",
"grid",
"xlsx",
"reshape2",
"stargazer",
"Hmisc",
"readxl",
"httr",
"Hmisc",
"ipumsr",
"R.utils",
"maps",
"rgdal",
"ggtext",
"data.table",
"icd.data")
install_list <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(install_list)) install.packages(install_list)
lapply(packages, require, character.only = TRUE)
# B. READ IN DATA
# ------------------------#
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "_TWh", names(global))
names(global) <- c("X", "Year", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels" )
# Convert Year to a Data
global$Year <- as.Date(ISOdate(global$Year, 1, 1))
# Add a Location and GDP Identifier
global$Location <- "World"
global$GDP <- NA
# Drop Row Index column
global <- subset(global, select = -c(X))
# Re-Organize
global <- global[c("Year", "Location", "Population", "GDP","CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels")]
# Re-shape to match example:
global <- gather(global, Metric, Value, CO2_Avg:All_Fuels, factor_key=TRUE)
# Write to CSV
write.csv(data_final, "reshaped_global_data.csv", row.names = F)
#### B2. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
# Simplify column names:
names(country) <- c("Location", "Year", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP", "Population", "GDP")
# Convert Year to a Data
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
# Re-Organize
country <- country[c("Year", "Location", "Population", "GDP", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP")]
# Re-shape to match example:
country <- gather(country, Metric, Value, CO2:Energy_per_GDP, factor_key=TRUE)
# Write to CSV
write.csv(country, "reshaped_country_data.csv", row.names = F)
#### B3. COMBINE AND WRITE TO CSV
data <- rbind(global, country)
write.csv(data, "reshaped_all_data.csv", row.names = F)
# PROGRAM NAME: 6.859 - Final Project
# DESCRIPTION: Identify "failles"
# PROGRAMMER(S): Axelle Clochard
# DATE WRITTEN: 5/05/2021
# STEP 0. SET UP WORKSPACE AND LOAD DATA
# ---------------------------------------------------------------------------------------------------#
# ---------------------------------------------------------------------------------------------------#
# A. SET WORKSPACE PARAMS
# ------------------------#
rm(list = ls())
# Set working directory to where file is
# script.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
# setwd(script.dir)
setwd('C:/Users/axell/OneDrive/Documents/MIT/6.859/A4/final-project-call-of-data/data/output')
# install packages if necessary
packages <- c("ggplot2",
"plyr",
"scales",
"dplyr",
'stringr',
"tidyr",
"purrr",
"gridExtra",
"grid",
"xlsx",
"reshape2",
"stargazer",
"Hmisc",
"readxl",
"httr",
"Hmisc",
"ipumsr",
"R.utils",
"maps",
"rgdal",
"ggtext",
"data.table",
"icd.data")
install_list <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(install_list)) install.packages(install_list)
lapply(packages, require, character.only = TRUE)
# B. READ IN DATA
# ------------------------#
#### B1. Read in GLOBAL DATA
global = read.csv("./global_data.csv", stringsAsFactors = F)
# Simplify column names:
names(global) <- gsub("..TWh.|..Twh.", "_TWh", names(global))
names(global) <- c("X", "Year", "Population", "CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels" )
# Convert Year to a Data
global$Year <- as.Date(ISOdate(global$Year, 1, 1))
# Add a Location and GDP Identifier
global$Location <- "World"
global$GDP <- NA
# Drop Row Index column
global <- subset(global, select = -c(X))
# Re-Organize
global <- global[c("Year", "Location", "Population", "GDP","CO2_Avg", "Temperature", "Fossil_Fuels_TWh", "Renewables_TWh", "All_Fuels")]
# Re-shape to match example:
global <- gather(global, Metric, Value, CO2_Avg:All_Fuels, factor_key=TRUE)
# Write to CSV
write.csv(global, "reshaped_global_data.csv", row.names = F)
#### B2. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
# Simplify column names:
names(country) <- c("Location", "Year", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP", "Population", "GDP")
# Convert Year to a Data
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
# Re-Organize
country <- country[c("Year", "Location", "Population", "GDP", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP")]
# Re-shape to match example:
country <- gather(country, Metric, Value, CO2:Energy_per_GDP, factor_key=TRUE)
# Write to CSV
write.csv(country, "reshaped_country_data.csv", row.names = F)
#### B3. COMBINE AND WRITE TO CSV
data <- rbind(global, country)
write.csv(data, "reshaped_all_data.csv", row.names = F)
names(data)
View(country)
unique(country$Location)
hist(country$GDP)
hist(country$GDP, 30)
min(country$GDP)
max(country$GDP)
median(country$GDP)
# Random Country Grouping Variable
country$Group <- subtring(country$Location, 1, 1)
# Random Country Grouping Variable
country$Group <- substring(country$Location, 1, 1)
#### B2. Read in COUNTRY-LEVEL DATA
country = read.csv("./country-level.csv", stringsAsFactors = F)
# Drop Row Index column
country <- subset(country, select = -c(X, index))
# Simplify column names:
names(country) <- c("Location", "Year", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP", "Population", "GDP")
# Convert Year to a Data
country$Year <- as.Date(ISOdate(country$Year, 1, 1))
# Random Country Grouping Variable
country$Group <- substring(country$Location, 1, 1)
# Re-Organize
country <- country[c("Year", "Location", "Population", Group, "GDP", "CO2", "CO2_per_GDP", "Share_of_Global_CO2", "CO2_per_Capita", "CO2_per_Unit_Energy", "Primary_Energy_Consumption", "Energy_per_Capita", "Energy_per_GDP")]
# Re-shape to match example:
country <- gather(country, Metric, Value, CO2:Energy_per_GDP, factor_key=TRUE)
# Write to CSV
write.csv(country, "reshaped_country_data.csv", row.names = F)
min(population)
min(country$Population)
max(country$Population)
median(country$Population)
